% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/github_release.R
\name{github_release_create}
\alias{github_release_create}
\title{Create a github release}
\usage{
github_release_create(info, description = NULL, filenames = NULL,
  target = NULL, ignore_dirty = FALSE, yes = !interactive())
}
\arguments{
\item{info}{Result of running \code{github_release_info}}

\item{description}{Optional text description for the release.  If
this is omitted then GitHub will display the commit message from
the commit that the release points at.}

\item{target}{Target of the release.  This can be either the name
of a branch (e.g., \code{master}, \code{origin/master}),
existing tag \emph{without a current release} or an SHA of a
commit.  It is an error if the commit that this resolves to
locally is not present on GitHub (e.g., if your branch is ahead
of GitHub).  Push first!}

\item{ignore_dirty}{Ignore non-checked in files?  By default, your
repository is expected to be in a clean state, though files not
known to git are ignored (as are files that are ignored by git).
But you must have no uncommited changes or staged but uncommited
files.}

\item{yes}{Skip the confirmation prompt?  Only prompts if
interactive.}

\item{filename}{Filename to upload; optional if in \code{info}.
If listed in \code{info}, \code{filename} can be different but
the file will be renamed to \code{info$filename} on uploading.
If given but not in \code{info}, the uploaded file will be
\code{basename(filename)} (i.e., the directory will be
stripped).}
}
\description{
Create a github release for your package.  This tries very hard to
do the right thing but it's not always straightforward.  It first
looks for your package.  Then it will work out what your last
commit was (if \code{target} is NULL), the version of the package
(from the DESCRIPTION).  It then creates a release on GitHub with
the appropriate version number and uploads the file
\code{filename} to the release.  The version number in the
DESCRIPTION must be greater than the highest version number on
GitHub.
}
\details{
This function requires a system git to be installed and on the
path.  The version does not have to be particularly recent.

This function also requires the \code{GITHUB_TOKEN} environment
variable to be set, and for the token to be authorised to have
write access to your repositories.
}
