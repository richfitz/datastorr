% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simple.R
\name{datastorr}
\alias{datastorr}
\alias{datastorr_versions}
\title{Fetch data from a datastorr repository}
\usage{
datastorr(repo, path = NULL, metadata = "datastorr.json",
  branch = "master", private = FALSE, refetch = FALSE,
  version = NULL, extended = FALSE)

datastorr_versions(..., local = TRUE)
}
\arguments{
\item{repo}{Either a github repo in the form
\code{<username>/<repo>} (e.g.,
\code{"richfitz/data"} or the path to a json file
on your filesystem.}

\item{path}{The path to store the data at.  Using \code{NULL} will}

\item{metadata}{The name of the metadata file within the repo (if
\code{repo} refers to a github repo.  The default is
\code{datastorr.json} at the root of the repository, but any
other filename can be used.}

\item{branch}{The branch in the repo to use.  Default is
\code{master}.}

\item{private}{A logical indicating if the repository is private
and therefor if authentication will be needed to access it.}

\item{refetch}{Refetch the metadata file even if it has already
been downloaded previously.}

\item{version}{Which version to download (if \code{extended} is
\code{FALSE} -- the default).  By default the most recent
version on the remote, or the current version locally will be
fetched.}

\item{extended}{Don't fetch the data, but instead return an object
that can query data, versions, etc.}

\item{...}{Arguments passed through to \code{datastorr}}

\item{local}{Return information on local versions?}
}
\description{
Create a lightweight datastorr interface (rather than using the
full package approach).  This approach is designed for the
"files that don't fit in git" use-case.
}
\details{
Note that the package approach is likely to scale better; in
particular it allows for the reading function to be arbitrarily
complicated, allows for package installation and loading, etc.
With this simple interface you will need to document your
dependencies carefully.  But it does remove the requirement for
making a package and will likely work pretty well as part of an
analysis pipeline where your dependencies are well documented
anyway.
}
\examples{
\dontrun{
path <- tempfile()
dat <- datastorr("richfitz/data", path, extended = TRUE)
dat$list()
dat()
}
}
